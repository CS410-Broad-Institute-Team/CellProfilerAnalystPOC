{"version":3,"sources":["logo.svg","example_SETUP.SQL","components/Emma.js","components/Yahiya.js","components/Bella.js","components/Abby.js","components/Alex.js","jones.jpg","components/ProofOfConcept.js","App.js","reportWebVitals.js","index.js"],"names":["Emma","props","state","imageSource","logo","showFile","fileName","a","preventDefault","imageReader","FileReader","onload","console","log","target","result","setState","readAsDataURL","files","Array","from","findIndex","elem","name","setUpDF","this","df","perObjData","column_names","Papa","parsePromise","file","Promise","complete","error","parse","fName","index","findFileIndex","text","then","split","map","x","trim","lines","indexOf","create_index","end_index","column_lines","slice","assert","length","worker","skipEmptyLines","fastMode","dynamicTyping","results","data","dfd","columns","image_keys","column","tensor","object_keys","output_tensor1","square","add","output_tensor2","where","greaterEqual","array","indices","set_index","key","inplace","head","print","window","data_df","parseSQLData","parsePerObj","setupDF","init","getDF","className","src","alt","type","onChange","webkitdirectory","mozdirectory","msdirectory","odirectory","directory","multiple","href","rel","React","Component","Yahiya","features_to_use","fetch","setup_sql_raw","r","filter","includes","LogisticRegression","numStep","learningRate","Bella","Abby","Alex","ProofOfConcept","Grid","container","justify","spacing","style","backgroundColor","item","Button","variant","onClick","Container","maxWidth","GridList","cellHeight","cols","tile","GridListTile","width","jones","App","to","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.69664738.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export default __webpack_public_path__ + \"static/media/example_SETUP.c8183f4e.SQL\";","import { render } from \"@testing-library/react\"\nimport * as tf from \"@tensorflow/tfjs\";\nimport * as dfd from \"danfojs/src/index\";\nimport * as lgreg from \"ml-logistic-regression\";\nimport * as prprcss from \"ml-preprocess\";\nimport React from 'react';\nimport logo from '../logo.svg';\nimport Papa from \"papaparse\";\nimport raw from \"../example_SETUP.SQL\";\nexport default class Emma extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {imageSource: logo};\n}\n\n  componentDidMount(){};\n  componentWillUnmount(){};\n  render(){\n    var showFile = async (fileName) => {\n      fileName.preventDefault()\n\n      // read in text file and display it on the console\n      // const textReader = new FileReader()\n      // textReader.onload = async (fileName) => { \n      //   console.log(fileName.target.result);\n      // };\n      // textReader.readAsText(fileName.target.files[4])\n\n\n      // read in first image and display where logo was using the callback I made\n      // create the image reader and callback to use the result when finished\n     const imageReader = new FileReader()\n      imageReader.onload = async (fileName) => { \n          console.log(fileName.target.result);\n          this.setState({imageSource: fileName.target.result})\n          };\n      // start the reading of the image\n      imageReader.readAsDataURL(fileName.target.files[6]);\n\n      // this displays the available files from the user upload of cpa_example directory\n      // console.log(fileName.target.files) \n\n      // parse with the papa, per_object.csv\n      console.log(fileName.target.files);\n      var object_index = Array.from(fileName.target.files).findIndex((elem) => {\n        return elem.name === \"per_object.csv\";\n      });\n      class SetupSqlData {\n        constructor() {  \n          this.df = null;\n          this.perObjData = null;\n          this.column_names = null;\n          Papa.parsePromise = function(file) {\n            return new Promise(function(complete, error) {\n              Papa.parse(file, {complete, error});\n            });\n          };\n      }\n          getDF() {\n            return this.df;\n          }\n          findFileIndex (fName) {\n              var index = Array.from(fileName.target.files).findIndex((elem) => {\n                  return elem.name === fName;\n            });\n               return index;\n          }\n          parseSQLData() {\n             var column_n = null;\n             const textReader = new FileReader()\n             textReader.onload = async (fileName) => { \n             console.log(fileName.target.result);\n            };\n            var index = this.findFileIndex(\"example_SETUP.SQL\");\n           \n            return fileName.target.files[index].text()\n            .then((text) => {\n              return text.split(\"\\n\").map((x)=>x.trim());\n            })\n            .then(lines => {\n              console.log(lines.indexOf(\"CREATE TABLE per_object \\(\"));\n              console.log(lines.indexOf(\"PRIMARY KEY  (ImageNumber,ObjectNumber)\"));\n              var setup_lines = lines;             \n              var create_index = lines.indexOf(\"CREATE TABLE per_object \\(\");\n              var end_index = lines.indexOf(\"PRIMARY KEY  (ImageNumber,ObjectNumber)\");\n              var column_lines = lines.slice(create_index + 1, end_index);\n              this.column_names = column_lines.map((name)=>(name.split(' ')[0]));      \n              console.assert(this.column_names[this.column_names.length - 1],\n                   'AreaNormalized_Cytoplasm_AreaShape_Zernike9_9');\n                   console.log(\"df complete\");\n             });\n      \n\n          }\n          parsePerObj() {\n            return Papa.parsePromise(fileName.target.files[this.findFileIndex(\"per_object.cvs\")], \n              {\n                  // use separate thread to not make app too slow\n                  worker: true,\n                  // blank lines confuse danfo.js so get rid of them\n                  skipEmptyLines: true,\n                  // per_object.csv has no strings, so we can get a faster speed reading it\n                  fastMode: true, \n                  // convert strings to numbers for smaller memory footprint\n                  dynamicTyping: true,\n                  // call this when the reading is done\n                  complete: (results, file) => {\n                  console.log(\"Parsing complete:\");\n                  console.log(results.data);\n                  this.perObjData = results.data;\n                  }\n              });  \n             }\n          setupDF() {\n                  // turn the data into a dataframe\n                 // let new_index = [\"ImageNumber\", \"ObjectNumber\" ]\n                  this.df = new dfd.DataFrame(this.perObjData,{ columns : this.column_names});\n                  console.log(\"df complete\")\n\n                 // calcuate a unique index number for each pair\n                 const image_keys = this.df.column(\"ImageNumber\").tensor;\n                 console.log(\"imagekeys complete\")\n                 const object_keys = this.df.column(\"ObjectNumber\").tensor;\n                 console.log(\"objeckeys complete\")\n                 const output_tensor1 = image_keys.square().add(image_keys).add(object_keys);\n                 console.log(\"output1 complete\")\n                 const output_tensor2 = object_keys.square().add(image_keys);\n                 console.log(\"output2 complete\")\n \n                 // calculate the index values, extract the js array, when its done set it as the indices for the df\n                 output_tensor1.where(image_keys.greaterEqual(object_keys), output_tensor2)\n                 .array()\n                 .then(indices => {\n                     console.log(\"indices complete\", indices)\n                     this.df.set_index({key: indices, inplace: true});\n                     this.df.head().print();\n                     window.data_df = this.df;\n                 });\n\n            \n          }\n          init() {\n            this.parseSQLData()\n            .then (()=> {\n              this.parsePerObj()\n              .then (()=>{\n                console.log(this.column_names);\n                console.log(this.perObjData);\n                this.setupDF();\n              });\n            });\n\n          }\n      }\n      const setUpDF = new SetupSqlData();\n      setUpDF.init();\n      var object_data = setUpDF.getDF();\n       \n      \n  }\t\n      \n        \n        return (\n            \n            \n          <div>\n              <h2>Emma</h2>\n              <p>Stuff of Emma</p>\n\n              <header className=\"App-header\">\n                  <img src={this.state.imageSource} className=\"App-logo\" alt=\"logo\" />\n                  <p>\n                  woo the atom thingy do the rotate woo yea\n                  </p>\n                  <script src=\"https://cdn.jsdelivr.net/npm/danfojs@0.2.4/lib/bundle.min.js\"></script>    \n              <input type=\"file\" onChange = {(fileName) => showFile(fileName)} webkitdirectory=\"true\" mozdirectory=\"true\" msdirectory=\"true\" odirectory=\"true\" directory=\"true\" multiple/>\n                  <a\n                  className=\"App-link\"\n                  href=\"https://reactjs.org\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  >\n                  Learn React\n                  </a>\n              </header>\n          </div>\n      )\n  };\n}\n","import { render } from \"@testing-library/react\"\nimport * as tf from \"@tensorflow/tfjs\";\nimport * as dfd from \"danfojs/src/index\";\nimport LogisticRegression, * as lgreg from \"ml-logistic-regression\";\n// import * as prprcss from \"ml-preprocess\";\nimport {normal} from 'ml-preprocess'; // replaces StandardScaler\nimport {Matrix} from 'ml-matrix';\n// example:\n// let matrix = [\n//     [2000, 1000, 3000],\n//     [3000, 2000, 1000],\n//     [1000, 1000, 1000]\n// ];\n// normal(matrix) == [\n//     [0, -1, 1],\n//     [1, 0, -1],\n//     [0, 0, 0]\n// ];\nimport React from 'react';\nimport logo from '../logo.svg';\nimport Papa from \"papaparse\";\n// import raw_csv from '../per_object.csv'\n\n// import raw from \"./example_SETUP.SQL\";\n\nimport setup_sql_raw from \"../example_SETUP.SQL\"; \n\nexport default class Yahiya extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {imageSource: logo};\n\n        Papa.parsePromise = function(file) {\n            return new Promise(function(complete, error) {\n              Papa.parse(file, {complete, error});\n            });\n          };\n    }\n\n    componentDidMount(){\n\n    };\n    componentWillUnmount(){};\n\n\n\n    render(){\n\n        // const object_data_promise = Promise((resolve) => {\n\n            // return Papa.parsePromise(fileName.target.files[object_data_index])\n            // .then((results) => {\n\n            // })\n\n\n            // Papa.parse(fileName.target.files[object_data_index], \n            //     {\n            //         // use separate thread to not make app too slow\n            //         worker: true,\n            //         // blank lines confuse danfo.js so get rid of them\n            //         skipEmptyLines: true,\n            //         // per_object.csv has no strings, so we can get a faster speed reading it\n            //         fastMode: true, \n            //         // convert strings to numbers for smaller memory footprint\n            //         dynamicTyping: true,\n            //         // call this when the reading is done\n            //         complete: (results, file) => {\n            //             console.log(\"Parsing complete:\");\n            //             // console.log(results.data);\n    \n            //             // turn the data into a dataframe\n            //             const object_data = new dfd.DataFrame(results.data, {columns: column_names});\n            //             console.log(\"df complete\")\n    \n            //             // calcuate a unique index number for each pair\n            //             const image_keys = object_data.column(\"ImageNumber\").tensor;\n            //             console.log(\"imagekeys complete\")\n            //             const object_keys = object_data.column(\"ObjectNumber\").tensor;\n            //             console.log(\"objeckeys complete\")\n            //             const output_tensor1 = image_keys.square().add(image_keys).add(object_keys);\n            //             console.log(\"output1 complete\")\n            //             const output_tensor2 = object_keys.square().add(image_keys);\n            //             console.log(\"output2 complete\")\n    \n            //             // calculate the index values, extract the js array, when its done set it as the indices for the df\n            //             output_tensor1.where(image_keys.greaterEqual(object_keys), output_tensor2)\n            //             .array()\n            //             .then(indices => {\n            //                 console.log(\"indices complete\", indices)\n            //                 object_data.set_index({key: indices, inplace: true});\n            //                 console.log(\"finish set index\");\n            //                 object_data.head().print();\n            //                 // window.data_df = object_data;\n            //                 return object_data;\n            //             })\n            //         }\n            //     }\n            // )\n\n\n            // fetch(setup_sql_raw)\n            // .then(r => r.text())\n            // .then(text => {\n            //     return text.split(\"\\n\").map((x)=>x.trim());\n            // })\n            // .then(lines => {\n            //     // console.log(lines.indexOf(\"CREATE TABLE per_object \\(\"));\n            // // console.log(lines.indexOf(\"PRIMARY KEY  (ImageNumber,ObjectNumber)\"));\n            //     setup_lines = lines;\n            //     create_index = lines.indexOf(\"CREATE TABLE per_object (\");\n            //     end_index = lines.indexOf(\"PRIMARY KEY  (ImageNumber,ObjectNumber)\");\n            //     column_lines = lines.slice(create_index + 1, end_index);\n            //     column_names = column_lines.map((name)=>(name.split(' ')[0])); //copied from Emma.js\n            //     return column_names;\n            // })\n            // .then (column_names => {\n            //     var object_data_index = Array.from(fileName.target.files).findIndex((elem) => {\n            //         return elem.name === \"per_object.csv\";\n            //       });\n\n                \n            // })\n        // })\n\n        // manually fetch and modify string in javascript normally\n        // fetch(raw)\n        // .then(r => r.text())\n        // .then(text => {\n        // \treturn text.split(\"\\n\");\n        // })\n        // .then(lines => {\n        // \tconsole.log(lines.indexOf(\"CREATE TABLE per_object \\(\"));\n        // \tconsole.log(lines.indexOf(\" PRIMARY KEY  \\(ImageNumber,ObjectNumber\\)\"));\n        // })\n            \n    // file read callback\n        // var on_folder_uploaded_callback = async (fileName) => {\n        //     fileName.preventDefault()\n\n        //     // read in text file and display it on the console\n        //     // const textReader = new FileReader()\n        //     // textReader.onload = async (fileName) => { \n        //     //   console.log(fileName.target.result);\n        //     // };\n        //     // textReader.readAsText(fileName.target.files[4])\n\n\n        //     // read in first image and display where logo was using the callback I made\n        //     // create the image reader and callback to use the result when finished\n        //     const imageReader = new FileReader()\n        //     imageReader.onload = async (fileName) => { \n        //         console.log(fileName.target.result);\n        //         this.setState({imageSource: fileName.target.result})\n        //         };\n        //     // start the reading of the image\n\n        //     var object_data_index = Array.from(fileName.target.files).findIndex((elem) => {\n        //         return elem.name === \"per_object.csv\";\n        //       });\n\n        //     var image_data_index = Array.from(fileName.target.files).findIndex((elem) => {\n        //     return elem.name === \"per_image.csv\";\n        //     });\n        //     var training_data_index = Array.from(fileName.target.files).findIndex((elem) => {\n        //         return elem.name === \"MyTrainingSet.txt\";\n        //         });\n\n\n        //     imageReader.readAsDataURL(fileName.target.files[6]);\n\n            // this displays the available files from the user upload of cpa_example directory\n            // console.log(fileName.target.files) \n\n            // var df = null;\n            // parse with the papa, per_object.csv\n            // Papa.parsePromise(fileName.target.files[object_data_index], \n            // {\n            //     // use separate thread to not make app too slow\n            //     worker: true,\n            //     // blank lines confuse danfo.js so get rid of them\n            //     skipEmptyLines: true,\n            //     // per_object.csv has no strings, so we can get a faster speed reading it\n            //     fastMode: true, \n            //     // convert strings to numbers for smaller memory footprint\n            //     dynamicTyping: true,\n            //     // call this when the reading is done\n            //     complete: (results, file) => {\n            //         console.log(\"Parsing complete:\");\n            //         // console.log(results.data);\n\n            //         // turn the data into a dataframe\n            //         const object_data = new dfd.DataFrame(results.data, {columns: column_names});\n            //         console.log(\"df complete\")\n\n            //         // calcuate a unique index number for each pair\n            //         const image_keys = object_data.column(\"ImageNumber\").tensor;\n            //         console.log(\"imagekeys complete\")\n            //         const object_keys = object_data.column(\"ObjectNumber\").tensor;\n            //         console.log(\"objeckeys complete\")\n            //         const output_tensor1 = image_keys.square().add(image_keys).add(object_keys);\n            //         console.log(\"output1 complete\")\n            //         const output_tensor2 = object_keys.square().add(image_keys);\n            //         console.log(\"output2 complete\")\n\n            //         // calculate the index values, extract the js array, when its done set it as the indices for the df\n            //         // output_tensor1.where(image_keys.greaterEqual(object_keys), output_tensor2)\n            //         // .array()\n            //     }})\n            //         .then(indices => {\n            //             console.log(\"indices complete\", indices)\n            //             object_data.set_index({key: indices, inplace: true});\n            //             console.log(\"finish set index\");\n            //             object_data.head().print();\n            //             // window.data_df = object_data;\n            //             return object_data;\n            //         })\n            //         .then(object_data => {\n            //             Papa.parse(fileName.target.files[image_data_index], \n            //             {\n            //                 worker: true,\n            //                 skipEmptyLines: true,\n            //                 dynamicTyping: true,\n            //                 complete: (results, file) => {\n            //                     console.log('parsed image data csv')\n            //                     console.log(results.data)\n            //                     console.log(column_names)\n            //                     console.log(object_data)\n            //                     const image_data = new dfd.DataFrame(results.data, {columns: column_names});\n            //                     // got image data\n            //                     image_data.set_index({key: \"ImageNumber\", inplace: true});\n            //                     // image data set index to image number\n            //                     image_data.head().print();\n\n            //                     Papa.parse(fileName.target.files[training_data_index], \n            //                         {\n            //                             worker: true,\n            //                             skipEmptyLines: true,\n            //                             dynamicTyping: true,\n            //                             delimiter: \" \",\n            //                             comments: \"#\",\n            //                             complete: (results, file) => {\n            //                                 const training_data = new dfd.DataFrame(results.data, {columns: \"label imagenum objectnum x y\".split(\" \")})\n            //                                 training_data.drop({ index: [0,1],axis:0,inplace:true});\n\n\n            //                                 const image_keys = training_data.column(\"imagenum\").tensor;\n            //                                 const object_keys = object_data.column(\"objectnum\").tensor;\n            //                                 const output_tensor1 = image_keys.square().add(image_keys).add(object_keys);\n            //                                 const output_tensor2 = object_keys.square().add(image_keys);\n\n            //                                 output_tensor1.where(image_keys.greaterEqual(object_keys), output_tensor2)\n            //                                 .array()\n            //                                 .then(indices => {\n            //                                     console.log(\"indices complete\", indices)\n            //                                     const labeled_cells = object_data.loc({rows: indices}).tensor;\n            //                                     window.labeled_cells = labeled_cells;\n            //                                     window.features_to_use = features_to_use;\n            //                                     object_data.head().print();\n            //                                     // window.data_df = object_data;\n            //                                     return object_data;\n            //                                 })\n            //                             }\n                                        \n            //                         }\n            //                     );\n\n            //                 }\n            //             })\n            //         })\n                    \n                    \n            //     }  \n            \n\n        // MY CODE ASSIGNMENT STARTS HERE\n        var setup_lines = null;\n        var create_index = null;\n        var end_index = null;\n        var column_lines = null;\n        var column_names = null;\n        var features_to_use = null;\n\n        fetch(setup_sql_raw)\n        .then(r => r.text())\n        .then(text => {\n            return text.split(\"\\n\").map((x)=>x.trim());\n        })\n        .then(lines => {\n            // console.log(lines.indexOf(\"CREATE TABLE per_object \\(\"));\n        // console.log(lines.indexOf(\"PRIMARY KEY  (ImageNumber,ObjectNumber)\"));\n            setup_lines = lines;\n            create_index = lines.indexOf(\"CREATE TABLE per_object (\");\n            end_index = lines.indexOf(\"PRIMARY KEY  (ImageNumber,ObjectNumber)\");\n            column_lines = lines.slice(create_index + 1, end_index);\n            column_names = column_lines.map((name)=>(name.split(' ')[0])); //copied from Emma.js\n            \n        // console.log(column_lines);\n\n    // console.log(lines[1287]);\n    // console.log(lines[1287] === \"PRIMARY KEY  (ImageNumber,ObjectNumber)\")\n            //console.log(lines.indexOf(\" PRIMARY KEY  \\(ImageNumber,ObjectNumber\\)\"));\n\n            return column_lines;\n        })\n        .then(column_lines => {\n            features_to_use = column_lines.filter((elem)=>elem.includes(\"Location\"));\n            console.log(column_lines);\n            console.log(features_to_use);\n\n            //normal()\n\n            const classifier = new LogisticRegression({ numStep: 1000, learningRate: 5e-3 });\n            // classifier.train(X, Y);\n        });\n\n\n        \n        return (\n            \n            \n            <div>\n                <h2>Yahiya</h2>\n                <p>Yahiya Stuff</p>\n\n                <header className=\"App-header\">\n                    <img src={this.state.imageSource} className=\"App-logo\" alt=\"logo\" />\n                    <p>\n                    woo the atom thingy do the rotate woo yea\n                    </p>\n                    \n                {/* <input type=\"file\" onChange = {(fileName) => on_folder_uploaded_callback(fileName)} webkitdirectory=\"true\" mozdirectory=\"true\" msdirectory=\"true\" odirectory=\"true\" directory=\"true\" multiple/> */}\n                    <a\n                    className=\"App-link\"\n                    href=\"https://reactjs.org\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    >\n                    Learn React\n                    </a>\n                </header>\n            </div>\n        )\n    };\n}","import { render } from \"@testing-library/react\"\nimport React from 'react';\n\nexport default class Bella extends React.Component {\n    state = {\n\n    };\n\n    componentDidMount(){};\n    componentWillUnmount(){};\n    \n    render(){\n        console.log(\"hello woorld?\");\n        return(<div>\n            <p>Bella is here </p>\n        </div>)\n    };\n}","import { render } from \"@testing-library/react\"\nimport React from 'react';\n\nexport default class Abby extends React.Component {\n    state = {\n\n    };\n\n    componentDidMount(){};\n    componentWillUnmount(){};\n    \n    render(){\n        console.log(\"hello world\");\n        return (<div>\n            <p>Abby</p>\n          </div>)\n\n    };\n}","import { render } from \"@testing-library/react\"\nimport React from 'react'\n\nexport default class Alex extends React.Component {\n    state = {\n\n    };\n\n    componentDidMount(){};\n    componentWillUnmount(){};\n    render(){\n\n        // your javascript goes here:\n        console.log(\"hi there\");\n\n        // JSX goes here:\n        return (<div>\n            <h2>Alex</h2>\n            <p>Alex stuff</p>\n        </div>)\n    };\n}","export default __webpack_public_path__ + \"static/media/jones.88567442.jpg\";","import { render } from \"@testing-library/react\"\nimport React from 'react'\nimport Button from '@material-ui/core/Button'\nimport Container from '@material-ui/core/Container'\nimport Grid from '@material-ui/core/Grid';\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\n\nimport jones from '../jones.jpg'\n\nexport default class ProofOfConcept extends React.Component {\n    state = {\n\n    };\n\n    componentDidMount(){};\n    componentWillUnmount(){};\n    render(){\n\n        // your javascript goes here:\n        console.log(\"hi there\");\n\n        // JSX goes here:\n        return (<div>\n\n            <Grid container justify=\"center\" spacing={2} style={{ backgroundColor: '#cfe8fc'}}>\n                <Grid key={0} item>\n                    <Button variant=\"contained\"\n                            onClick={()=>console.log(\"Fetch!\")}>Fetch</Button>\n                </Grid>\n\n                <Grid key={1} item>\n                    <Button variant=\"contained\"\n                            onClick={()=>console.log(\"Train!\")}>Train</Button>\n                </Grid>\n\n                <Grid key={2} item>\n                    <Button variant=\"contained\"\n                            onClick={()=>console.log(\"Evaluate!\")}>Evaluate</Button>    \n                </Grid>\n            </Grid>\n\n            <Container  maxWidth=\"sm\">\n                \n            <GridList cellHeight={160} cols={3}>\n                {[0,1,2,3,4,5,6,7,8].map((tile) => (\n                <GridListTile key={tile} cols={ 1}>\n                    <Button \n                            onClick={()=>console.log(`Click Image: ${tile}!`)}>\n                        <img  width={'100%'} src={jones} alt={\"jones\"} />\n                    </Button>\n                </GridListTile>\n                ))}\n            </GridList>\n                \n\n            </Container>\n        </div>)\n    };\n}","// import logo from './logo.svg';\nimport './App.css';\n\nimport EmmaComponent from \"./components/Emma\"\n\nimport YahiyaComponent from \"./components/Yahiya\"\n\nimport BellaComponent from \"./components/Bella\"\nimport AbbyComponent from \"./components/Abby\"\nimport AlexComponent from \"./components/Alex\"\n\nimport ProofOfConceptComponent from \"./components/ProofOfConcept\"\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <div>\n          <ul>\n            <li>\n              <Link to=\"/ProofOfConcept\">Proof Of Concept</Link>\n            </li>\n            <li>\n              <Link to=\"/Yahiya\">Yahiya</Link>\n            </li>\n            <li>\n              <Link to=\"/Alex\">Alex</Link>\n            </li>\n            <li>\n              <Link to=\"/Emma\">Emma</Link>\n            </li>\n            <li>\n\n              <Link to=\"/Bella\">Bella</Link>\n\n            </li>\n            <li>\n            <Link to=\"/Abby\">Abby</Link>\n            </li>\n          </ul>\n\n          <hr />\n\n          {/*\n            A <Switch> looks through all its children <Route>\n            elements and renders the first one whose path\n            matches the current URL. Use a <Switch> any time\n            you have multiple routes, but you want only one\n            of them to render at a time\n          */}\n          <Switch>\n            <Route exact path=\"/ProofOfConcept\">\n              <ProofOfConcept/>\n            </Route>\n            <Route exact path=\"/Yahiya\">\n              <Yahiya />\n            </Route>\n            <Route path=\"/Alex\">\n              <Alex />\n            </Route>\n            <Route path=\"/Emma\">\n            <Emma />\n            </Route>\n            <Route path=\"/Abby\">\n            <Abby />\n            </Route>\n            <Route path=\"/Bella\">\n              <Bella />\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n\n\n    </div>\n\n  );\n}\nfunction ProofOfConcept() {\n  return <ProofOfConceptComponent></ProofOfConceptComponent>\n}\n\nfunction Yahiya() {\n  return <YahiyaComponent></YahiyaComponent>\n}\n\nfunction Alex() {\n  return <AlexComponent></AlexComponent>\n}\n\nfunction Emma() {\n  return <EmmaComponent></EmmaComponent>\n}\nfunction Bella() {\n  return <BellaComponent></BellaComponent>\n}\n\n\n\nfunction Abby() {\n  return <AbbyComponent></AbbyComponent>\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}