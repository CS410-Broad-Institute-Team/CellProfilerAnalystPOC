{"version":3,"sources":["example_SETUP.SQL","logo.svg","components/Emma.js","components/Yahiya.js","components/Bella.js","components/Abby.js","components/Alex.js","App.js","reportWebVitals.js","index.js"],"names":["Emma","props","state","imageSource","logo","showFile","fileName","a","preventDefault","imageReader","FileReader","onload","console","log","target","result","setState","readAsDataURL","files","Papa","parse","worker","skipEmptyLines","fastMode","dynamicTyping","complete","results","file","data","dfd","tf","head","print","create_index","end_index","column_lines","column_names","fetch","raw","then","r","text","split","map","x","trim","lines","indexOf","slice","name","assert","length","className","src","this","alt","type","onChange","webkitdirectory","mozdirectory","msdirectory","odirectory","directory","multiple","href","rel","React","Component","Yahiya","Bella","Abby","Alex","App","to","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7a15ea58.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/example_SETUP.c8183f4e.SQL\";","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { render } from \"@testing-library/react\"\nimport * as tf from \"@tensorflow/tfjs\";\nimport * as dfd from \"danfojs/src/index\";\nimport * as lgreg from \"ml-logistic-regression\";\nimport * as prprcss from \"ml-preprocess\";\nimport React from 'react';\nimport logo from '../logo.svg';\nimport Papa from \"papaparse\";\nimport raw from \"../example_SETUP.SQL\";\nexport default class Emma extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {imageSource: logo};\n}\n\n  componentDidMount(){};\n  componentWillUnmount(){};\n  render(){\n    var showFile = async (fileName) => {\n      fileName.preventDefault()\n\n      // read in text file and display it on the console\n      // const textReader = new FileReader()\n      // textReader.onload = async (fileName) => { \n      //   console.log(fileName.target.result);\n      // };\n      // textReader.readAsText(fileName.target.files[4])\n\n\n      // read in first image and display where logo was using the callback I made\n      // create the image reader and callback to use the result when finished\n     const imageReader = new FileReader()\n      imageReader.onload = async (fileName) => { \n          console.log(fileName.target.result);\n          this.setState({imageSource: fileName.target.result})\n          };\n      // start the reading of the image\n      imageReader.readAsDataURL(fileName.target.files[6]);\n\n      // this displays the available files from the user upload of cpa_example directory\n      // console.log(fileName.target.files) \n\n      // parse with the papa, per_object.csv\n      Papa.parse(fileName.target.files[5], \n      {\n          // use separate thread to not make app too slow\n          worker: true,\n          // blank lines confuse danfo.js so get rid of them\n          skipEmptyLines: true,\n          // per_object.csv has no strings, so we can get a faster speed reading it\n          fastMode: true, \n          // convert strings to numbers for smaller memory footprint\n          dynamicTyping: true,\n          // call this when the reading is done\n          complete: (results, file) => {\n          console.log(\"Parsing complete:\");\n          console.log(results.data);\n\n          // turn the data into a dataframe\n         const df = new dfd.DataFrame(tf.tensor(results.data));\n          // print the first 5 lines\n         df.head().print();\n          }\n      });        \n      \n  }\t\n  \n\n\n      var setup_lines = null;\n      var create_index = null;\n      var end_index = null;\n      var column_lines = null;\n      var column_names = null\n      var object_data;\n\n      fetch(raw)\n      .then(r => r.text())\n      .then(text => {\n        return text.split(\"\\n\").map((x)=>x.trim());\n      })\n      .then(lines => {\n        console.log(lines.indexOf(\"CREATE TABLE per_object \\(\"));\n        console.log(lines.indexOf(\"PRIMARY KEY  (ImageNumber,ObjectNumber)\"));\n        setup_lines = lines;             \n        create_index = lines.indexOf(\"CREATE TABLE per_object \\(\");\n        end_index = lines.indexOf(\"PRIMARY KEY  (ImageNumber,ObjectNumber)\");\n        column_lines = lines.slice(create_index + 1, end_index);\n        column_names = column_lines.map((name)=>(name.split(' ')[0]));         \n        console.assert(column_names[column_names.length - 1],\n             'AreaNormalized_Cytoplasm_AreaShape_Zernike9_9');\n        })\n   \n        /*\n        .then (lines=> {\n          dfd.read_csv(\"https://drive.google.com/file/d/1Ku2oYxF3dYbhSbLo4dGNkTyp7gkS7PFr\")\n          .then(df => {\n            object_data = new dfd.DataFrame(df, { columns : column_names} )\n          })\n          console.log(object_data)\n        })\n    \n   \n        dfd.read_csv(\"../cpa_example/per_object.csv\")\n        .then ( df => {\n          console.log(df.head());\n        })\n        */\n                          \n  \n        \n\n\n      // console.log(lines[1287]);\n      // console.log(lines[1287] === \"PRIMARY KEY  (ImageNumber,ObjectNumber)\")\n        //console.log(lines.indexOf(\" PRIMARY KEY  \\(ImageNumber,ObjectNumber\\)\"));\n      \n\n        \n      \n        \n        return (\n            \n            \n          <div>\n              <h2>Emma</h2>\n              <p>Stuff of Emma</p>\n\n              <header className=\"App-header\">\n                  <img src={this.state.imageSource} className=\"App-logo\" alt=\"logo\" />\n                  <p>\n                  woo the atom thingy do the rotate woo yea\n                  </p>\n                  \n              <input type=\"file\" onChange = {(fileName) => showFile(fileName)} webkitdirectory=\"true\" mozdirectory=\"true\" msdirectory=\"true\" odirectory=\"true\" directory=\"true\" multiple/>\n                  <a\n                  className=\"App-link\"\n                  href=\"https://reactjs.org\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  >\n                  Learn React\n                  </a>\n              </header>\n          </div>\n      )\n  };\n}","import { render } from \"@testing-library/react\"\nimport * as tf from \"@tensorflow/tfjs\";\nimport * as dfd from \"danfojs/src/index\";\nimport * as lgreg from \"ml-logistic-regression\";\nimport * as prprcss from \"ml-preprocess\";\nimport React from 'react';\nimport logo from '../logo.svg';\nimport Papa from \"papaparse\";\n// import raw_csv from '../per_object.csv'\n\n// import raw from \"./example_SETUP.SQL\";\n\nexport default class Yahiya extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {imageSource: logo};\n    }\n\n    componentDidMount(){\n\n    };\n    componentWillUnmount(){};\n    render(){\n\n        // manually fetch and modify string in javascript normally\n        // fetch(raw)\n        // .then(r => r.text())\n        // .then(text => {\n        // \treturn text.split(\"\\n\");\n        // })\n        // .then(lines => {\n        // \tconsole.log(lines.indexOf(\"CREATE TABLE per_object \\(\"));\n        // \tconsole.log(lines.indexOf(\" PRIMARY KEY  \\(ImageNumber,ObjectNumber\\)\"));\n        // })\n            \n    // file read callback\n        var showFile = async (fileName) => {\n            fileName.preventDefault()\n\n            // read in text file and display it on the console\n            // const textReader = new FileReader()\n            // textReader.onload = async (fileName) => { \n            //   console.log(fileName.target.result);\n            // };\n            // textReader.readAsText(fileName.target.files[4])\n\n\n            // read in first image and display where logo was using the callback I made\n            // create the image reader and callback to use the result when finished\n            const imageReader = new FileReader()\n            imageReader.onload = async (fileName) => { \n                console.log(fileName.target.result);\n                this.setState({imageSource: fileName.target.result})\n                };\n            // start the reading of the image\n            imageReader.readAsDataURL(fileName.target.files[6]);\n\n            // this displays the available files from the user upload of cpa_example directory\n            // console.log(fileName.target.files) \n\n            // parse with the papa, per_object.csv\n            Papa.parse(fileName.target.files[5], \n            {\n                // use separate thread to not make app too slow\n                worker: true,\n                // blank lines confuse danfo.js so get rid of them\n                skipEmptyLines: true,\n                // per_object.csv has no strings, so we can get a faster speed reading it\n                fastMode: true, \n                // convert strings to numbers for smaller memory footprint\n                dynamicTyping: true,\n                // call this when the reading is done\n                complete: (results, file) => {\n                console.log(\"Parsing complete:\");\n                console.log(results.data);\n\n                // turn the data into a dataframe\n                const df = new dfd.DataFrame(tf.tensor(results.data));\n                // print the first 5 lines\n                df.head().print();\n                }\n            });        \n            \n        }\t\n        \n        return (\n            \n            \n            <div>\n                <h2>Yahiya</h2>\n                <p>Yahiya Stuff</p>\n\n                <header className=\"App-header\">\n                    <img src={this.state.imageSource} className=\"App-logo\" alt=\"logo\" />\n                    <p>\n                    woo the atom thingy do the rotate woo yea\n                    </p>\n                    \n                <input type=\"file\" onChange = {(fileName) => showFile(fileName)} webkitdirectory=\"true\" mozdirectory=\"true\" msdirectory=\"true\" odirectory=\"true\" directory=\"true\" multiple/>\n                    <a\n                    className=\"App-link\"\n                    href=\"https://reactjs.org\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    >\n                    Learn React\n                    </a>\n                </header>\n            </div>\n        )\n    };\n}","import { render } from \"@testing-library/react\"\nimport React from 'react';\n\nexport default class Bella extends React.Component {\n    state = {\n\n    };\n\n    componentDidMount(){};\n    componentWillUnmount(){};\n    \n    render(){\n        console.log(\"hello woorld?\");\n        return(<div>\n            <p>Bella is here </p>\n        </div>)\n    };\n}","import { render } from \"@testing-library/react\"\nimport React from 'react';\n\nexport default class Abby extends React.Component {\n    state = {\n\n    };\n\n    componentDidMount(){};\n    componentWillUnmount(){};\n    \n    render(){\n        console.log(\"hello world\");\n        return (<div>\n            <p>Abby</p>\n          </div>)\n\n    };\n}","import { render } from \"@testing-library/react\"\nimport React from 'react'\n\nexport default class Alex extends React.Component {\n    state = {\n\n    };\n\n    componentDidMount(){};\n    componentWillUnmount(){};\n    render(){\n\n        // your javascript goes here:\n        console.log(\"hi there\");\n\n        // JSX goes here:\n        return (<div>\n            <h2>Alex</h2>\n            <p>Alex stuff</p>\n        </div>)\n    };\n}","// import logo from './logo.svg';\nimport './App.css';\n// import { useState } from 'react';\n// import * as tf from \"@tensorflow/tfjs\";\n// import * as dfd from \"danfojs/src/index\";\n// import * as lgreg from \"ml-logistic-regression\";\n// import * as prprcss from \"ml-preprocess\";\n// import Papa from \"papaparse\";\nimport raw from \"./example_SETUP.SQL\"; \n\nimport EmmaComponent from \"./components/Emma\"\n\nimport YahiyaComponent from \"./components/Yahiya\"\n\nimport BellaComponent from \"./components/Bella\"\nimport AbbyComponent from \"./components/Abby\"\nimport AlexComponent from \"./components/Alex\"\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\n\n\nfunction App() {\n\n\n  var setup_lines = null;\n  var create_index = null;\n  var end_index = null;\n  var column_lines = null;\n\n  fetch(raw)\n\t.then(r => r.text())\n\t.then(text => {\n\t\treturn text.split(\"\\n\").map((x)=>x.trim());\n\t})\n\t.then(lines => {\n\t\t// console.log(lines.indexOf(\"CREATE TABLE per_object \\(\"));\n    // console.log(lines.indexOf(\"PRIMARY KEY  (ImageNumber,ObjectNumber)\"));\n    setup_lines = lines;\n    create_index = lines.indexOf(\"CREATE TABLE per_object (\");\n    end_index = lines.indexOf(\"PRIMARY KEY  (ImageNumber,ObjectNumber)\");\n    column_lines = lines.slice(create_index + 1, end_index);\n    // console.log(column_lines);\n\n   // console.log(lines[1287]);\n   // console.log(lines[1287] === \"PRIMARY KEY  (ImageNumber,ObjectNumber)\")\n\t\t//console.log(lines.indexOf(\" PRIMARY KEY  \\(ImageNumber,ObjectNumber\\)\"));\n\t});\n\n  return (\n    <div className=\"App\">\n      <Router>\n        <div>\n          <ul>\n            <li>\n              <Link to=\"/Yahiya\">Yahiya</Link>\n            </li>\n            <li>\n              <Link to=\"/Alex\">Alex</Link>\n            </li>\n            <li>\n              <Link to=\"/Emma\">Emma</Link>\n            </li>\n            <li>\n\n              <Link to=\"/Bella\">Bella</Link>\n\n            </li>\n            <li>\n            <Link to=\"/Abby\">Abby</Link>\n            </li>\n          </ul>\n\n          <hr />\n\n          {/*\n            A <Switch> looks through all its children <Route>\n            elements and renders the first one whose path\n            matches the current URL. Use a <Switch> any time\n            you have multiple routes, but you want only one\n            of them to render at a time\n          */}\n          <Switch>\n            <Route exact path=\"/Yahiya\">\n              <Yahiya />\n            </Route>\n            <Route path=\"/Alex\">\n              <Alex />\n            </Route>\n            <Route path=\"/Emma\">\n            <Emma />\n            </Route>\n            <Route path=\"/Abby\">\n            <Abby />\n            </Route>\n            <Route path=\"/Bella\">\n              <Bella />\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n\n\n    </div>\n\n  );\n}\n\nfunction Yahiya() {\n  return <YahiyaComponent></YahiyaComponent>\n}\n\nfunction Alex() {\n  return <AlexComponent></AlexComponent>\n}\n\nfunction Emma() {\n  return <EmmaComponent></EmmaComponent>\n}\nfunction Bella() {\n  return <BellaComponent></BellaComponent>\n}\n\n\n\nfunction Abby() {\n  return <AbbyComponent></AbbyComponent>\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}